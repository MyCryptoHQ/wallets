import {
  boolean,
  is,
  literal,
  number,
  object,
  optional,
  size,
  string,
  type,
  union
} from 'superstruct';

import { safeJSONParse } from '@utils';

export enum KeystoreType {
  PRESALE_BKP = 'PRESALE_BKP',
  PRESALE = 'PRESALE',
  V1 = 'V1',
  V2 = 'V2',
  V3 = 'V3'
}

/**
 * Presale wallet generated by pyethrecover.
 */
const PresaleBkpKeystoreStruct = type({
  encseed: string(),
  ethaddr: string(),
  bkp: string(),
  btcaddr: optional(string())
});

/**
 * Regular presale wallet.
 */
const PresaleKeystoreStruct = type({
  encseed: string(),
  ethaddr: string(),
  email: optional(string()),
  btcaddr: optional(string())
});

/**
 * V1 keystore format, used by old versions of MyCrypto.
 */
const V1KeystoreStruct = type({
  address: string(),
  encrypted: boolean(),
  locked: boolean(),
  hash: string(),
  private: string(),
  public: string()
});

/**
 * V2 keystore format, used by old versions of MyCrypto.
 */
const V2KeystoreStruct = type({
  privKey: size(string(), 64)
});

/**
 * V3 keystore format, currently used by MyCrypto, Geth, etc.
 */
const V3KeystoreStruct = type({
  crypto: object({
    cipher: string(),
    ciphertext: string(),
    cipherparams: object({
      iv: string()
    }),
    kdf: string(),
    kdfparams: union([
      // PBKDF2
      object({
        c: number(),
        dklen: number(),
        prf: string(),
        salt: string()
      }),
      // Scrypt
      object({
        dklen: number(),
        salt: string(),
        n: number(),
        r: number(),
        p: number()
      })
    ]),
    mac: string(),
    version: optional(number())
  }),
  id: string(),
  version: literal(3)
});

export const getKeystoreType = (json: string): KeystoreType => {
  const [error, keystore] = safeJSONParse(json);
  if (error) {
    throw new Error('Invalid keystore file: cannot parse JSON');
  }

  if (is(keystore, PresaleBkpKeystoreStruct)) {
    return KeystoreType.PRESALE_BKP;
  }

  if (is(keystore, PresaleKeystoreStruct)) {
    return KeystoreType.PRESALE;
  }

  if (is(keystore, V1KeystoreStruct)) {
    return KeystoreType.V1;
  }

  if (is(keystore, V2KeystoreStruct)) {
    return KeystoreType.V2;
  }

  if (is(keystore, V3KeystoreStruct)) {
    return KeystoreType.V3;
  }

  throw new Error('Invalid keystore file: format not recognized');
};
